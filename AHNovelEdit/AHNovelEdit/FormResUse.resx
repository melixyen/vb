<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TxBodySet.Text" xml:space="preserve">
    <value>*隱藏標籤：【】
慣用名：【】
自訂隸屬群：【】
姓名：【】英文名：【】
外號：【】稱號：【】
家族：【】家族姓：【】
性別：【】身高：【】體重：【】
生日：【】目前年齡：【】
血型：【】
居所：【】
籍貫：【】種族：【】
階級：【】職務：【】
部門：【】主管：【】
部隊：【】隊長：【】
班級：【】導師：【】
門派：【】掌門：【】
學歷：【】
經歷：【】
專長：【】
經濟狀況：【】
健康度：【】
功績：【】
技能：【】
性格：【】
志向：【】
喜好：【】
厭惡：【】
害怕：【】
好友：【】
愛人：【】
仇人：【】
冤家或死對頭：【】
親友團：【】
交通工具：【】
武器裝備：【】
長相描述：【】
衣櫃：【】
行動目標：【】
參與群體：【】
生平背景：【】
個性描述：【】
口頭禪：【】
經典對白：【】
相關靈感：【】
備注：【】
*隱藏關係：【】
*隱藏身份：【】
*隱藏設定：【】
*隱藏背景：【】
*隱藏志向：【】
*設定結束：【END此行請保留在每個人物設定檔最後一行】</value>
  </data>
  <data name="TxHelp.Text" xml:space="preserve">
    <value>
&lt;ahne[tag:split]說明總頁[end:split]&gt;
說明總頁
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
＊　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　＊
＊如果看一堆文字覺得很吃力，快按下工具列的「識別」按鈕。　　　　＊
＊　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　＊
＊如果輸入法變成灰色框框無法打中文，請按一次Ｓｈｉｆｔ＋Ａ　　　＊
＊　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　＊
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

總頁－有關Aurora Hacker NovelEdit（極光駭客小說編輯器、AH小說編輯器，以下簡稱『AHNE』）之功能分列介紹。本說明檔直接採用AHNE之「分節標籤」文件格式，使用者…就是說您啦，直接在左側的分節控制器之分節列表中點選您所想要查詢的章節即可。

本程式所儲存的檔案編碼格式均為UTF-8編碼。


&lt;ahne[tag:split]目錄[end:split]&gt;
目錄

第一章：【功能表與工具列】－基本功能表、工具列之功能介紹。
第二章：【分節控制器】－有關分節控制器的使用方式與介紹。
第三章：【符號表與快捷鍵】－有關螢幕下排符號表的使用說明和部分符號的快捷鍵。
第四章：【字數計】－有關字數計的使用和說明。
第五章：【輔助板】－有關輔助板的使用和說明。
第六章：【選項說明】－有關工具→選項的內容和設定說明。
第七章：【人物設定小老師】－有關工具→人物設定的所有功能和使用說明。
第八章：【大綱編輯小老師】－如何利用AHNE幫助編寫小說大綱。
第九章：【作者的話】－就是……廢話（那還花時間打？）
第十章：【字碼轉換】－Beta2 新增功能，全半形和簡繁體互轉。
第十一章：【分頁書籤快載】－Beta3 新增功能，動態選單。


&lt;ahne[tag:split]第一章：功能表與工具列[end:split]&gt;
【功能表與工具列】

【檔案】功能表

	《新增》：產生一頁新的分頁並開啟一分全新的空白文件給您編輯，快捷鍵為『CTRL+T』。

	《開啟》：開啟一份存在電腦內的純文字檔，也就是以前存過的小說檔，快捷鍵為『CTRL+O』。

	《關閉》：關閉一份已經打開的文件，在本程式中要關閉文件有三種方法，第一種方法是按檔案功能表的關閉，那麼將會把目前編輯的文件關閉起來！喔，對了，如果沒存檔的話會提示您的；第二種方法是在分頁標籤，就是上面那排頁籤按滑鼠中鍵（滾輪鍵），那麼將會關閉你點選的那一個分頁以及它開啟的文件；第三種方法，有沒有看到右上角有一個X字樣的按鈕？按下去也會關掉目前編輯的文件喔！

	《儲存》：將目的正在編輯的文件存檔，快捷鍵為『CTRL+S』

	《另存新檔》：將目前正在編輯的文件存成另一個檔案。

	《結束》：嗯……就是把AHNE程式關掉啦！

【編輯】功能表

	《復原》：恢復之前的新增刪除文字動作，快捷鍵為『CTRL+Z』

	《取消復原》：取消之前復原的動作，快捷鍵為『CTRL+Y』

	《剪下》：將選許的文字剪下來到剪貼簿中，快捷鍵為『CTRL+X』

	《複製》：將選許的文字複製到剪貼簿中，快捷鍵為『CTRL+C』

	《貼上》：將剪貼簿中的文字貼上編輯的文件內，快捷鍵為『CTRL+V』

	《全選》：將編輯的文件所有文字選取起來，快捷鍵為『CTRL+A』

	《搜尋》：查詢文件內的某個關鍵字在那裡或是取代掉原本的文字，快捷鍵為『CTRL+F』。請注意，您可以先在文件中將要查詢的文字選取起來，它將會直接成為您要查詢的關鍵字，可省去輸入的麻煩。

	《找下一個》：如果有搜尋過，它將會為您找下一個關鍵字所在位置，快捷鍵為『F3』

【工具】功能表

	《人物設定》：請參閱第七章「人物設定小老師」的相關說明。

	《轉成》：內有轉成HTML及轉成BBS格式，它會自動新增一個文字檔案並將目前編輯的文章段落分段方式轉成HTML的「＜ｐ＞＜ｂｒ＞」形式或是 BBS 78個字元寬換行形式。（如果要刪除分節標籤應該在轉換前先做這一個動作，否則會一併轉換過去。）

	《去除所有分節標籤》：如果您使用了第二章所介紹的分節控制器，會在文件中留下分節標籤，當您要一次去除掉所有分節標籤的時候請按這一個選項。不用擔心，這功能會開一份新的文件出來儲存去掉所有分節標籤後的文章，原始含有分節標籤的文章依然會存在。這功能可以應用在當您要發表全文，複製所有文章內容，但又不想複製分節標籤時。

	《選項》：請參閱第六章「選項說明」的相關說明。	

	《外部設定器》：可以將「用AH Novel Edit打開」之功能加入資料夾裡對檔案按下右鍵的快速選單內，或是移除掉它。	

	《字碼轉換》：請參閱第十章「字碼轉換」的相關說明。

	《計時器歸零》：字數計下方的軟體啟動計時器歸零。

	《分節控制器》：請參閱第二章「分節控制器」的相關說明。

&lt;ahne[tag:split]　　〔工具列〕[end:split]&gt;

【工具列】橫棒工具列

	《新增》《開啟》《儲存》……前幾排按鈕功能都如同功能表。

讓我們來看看長選取、字型統整、識別這三個項目的功能吧！

	《長選取》：先把滑鼠游標移到文章中您想要選取的起點，然後按一下長選取，此時長選取的按鈕狀態將會改變為反白狀態，然後您可以在文章中任意移點，或是使用分節列表跳到某一段去，只要不切換文章標籤到其他檔案都無所謂。等到移到您想要選取的另一個游標位置時，再按一次長選取按鈕，它就會幫你把前一點和這一點之間的文字都選取起來。

	《字型統整》：編輯中複製貼上或改色改字型，有可能造成字型紊亂不整齊，顏色不一，這時候您可以利用這個按鈕將字型恢復為選項中的設定值。如果您選取了一段文字，那麼這個按鈕只會恢復您選取的那一段文字；如果您沒有選取任何文字，那麼這個按鈕將會將整篇文章的字型格式統一。

	《識別》：此按鈕可以識別文章中一些引號括號內容，利用高亮色彩為您識別出這些文字作為醒目提示。當您看完後要編輯文章時，可以用字型統整恢復原色避免錯亂。

&lt;ahne[tag:split]第二章：分節控制器[end:split]&gt;
【分節控制器】

分節控制器的目的在於幫助您做好節段的管理，以便於在同一篇文章內區分不同章節。它透過一行小於符號加ahne開頭的TAG做切割，幫助您把同一篇文章內不同節切開，這一行內的命名也代表在左側分節控制器列表中的名稱。

假設當您寫一章六千字的文章時，也許您想每天提供一點章節的一部分，比方說一千字作為每日更新，那麼這一章您就可以切成六節來更新。可是傳統的作法上，您必需自己標記在同一份檔案中的某一段落作個記號，然後要貼文或修改時手動尋找、選取與管理這一節文字，使用上相當不方便；若是把同一篇文章存成六個檔案，比如第九章-1.txt、第九章-2.txt、第九章-3.txt、……那麼將來在合併檔案貼完整章節的整理時又相當不方便。所以，您可以應用分節控制器，AHNE的重點小說編輯功能，幫助您在同一篇文章內做好分節的工作。

記住，所有分節都是透過「＜ahne」標籤做切割的，請勿更動到標籤內容，一旦破壞格式將會造成程式無法判讀標籤，這點請您務必注意。相信在您閱讀這篇說明內容時已經感受到分節控制器的好處了，下面就讓我們來看看它有什麼功能以及如何應用吧！

&lt;ahne[tag:split]　　〔新增刪除重整選取〕[end:split]&gt;

【新增】
分節控制器的第一個按鈕，按下新增後可以為這一節輸入一個您想要顯示在列表的名稱，它會在您滑鼠游標位置的那一行新增一行分節標籤。當然，也許您已經注意到了，為什麼左邊列表的第二章下面幾個屬於第二章內容的分節標籤內縮了兩格，要怎麼新增成這種子項目型式呢？這個做法……單純只是因為我在命名的時候多打了兩個空白……不要噓！

【刪除】
請在分節列表上點選一個分節標籤的名稱，那個選項將會反白，然後你可以按下刪除，這個時候程式會去尋找您指定的分節標籤，如果有找到的話將會反白選取起來並請您確認是否為您要刪除的分節標籤，是的話給它按下去就對啦！

【重整】
因為標籤內容可能因為某些原因更動到，在刪除時您可能發現它沒找到您指定的標籤，或是在使用其他功能時出了意外，這時候請您按下重整，程式會重新整理分節標籤列表，以符合最新最正確的分節內容。

【選取】
這是一個相當重要的功能，前面介紹時已然說過，分節控制器最重要的就是要幫助您快速便利的選取與管理文章中的某一節。請您先在分節列表上點選您要複製或管理的那一節，然後按下選取鍵，它就會幫您把這個分節中（不含分節標籤）的文字全部選取起來，您要複製就直接按下複製鈕就完成啦，這樣對每日更新一小段落貼文是否很方便呢？

&lt;ahne[tag:split]　　〔功能表內功能〕[end:split]&gt;

	《新增》：同按鈕的新增。

	《刪除標籤》：同按鈕的刪除。

	《刪除標籤及內文》：除了將標籤刪除外，也一併把該分節的內容全數刪除。「在分節列表上點選項目後按鍵盤Delete鍵可以無需確認快速刪除整個分節」，如有需要連續刪除的話請直接按Delete鍵。

	《重整》：同按鈕的重整。

	《選取標籤》：等同在分節列表上對某一項目連點兩項，會跳至該處並將標籤選取。

	《選取內文》：同按鈕的選取。

	《選取標籤加內文》：將標籤與內文一次選取起來。



&lt;ahne[tag:split]　　〔分節控制器應用〕[end:split]&gt;
分節控制器的應用，在講範例之前，先告訴你兩個您可能還不知道的使用法吧！

【連點兩下】：在分節列表上對該項目連點兩下，就會跳到該分節去同時把分節標籤選取起來。

【中鍵（滾輪鍵）】：點選項目後按中鍵，會把整節（包含分節標籤）通通選取起來。

【應用例子一：我這篇文章有一萬字，分成五節，今天要貼第三節內容】

這個時候，您的一萬字文章中應該有五個分節標籤。第一步，點選分節列表的第三節；第二步，按下「選取」鍵；第三步，CTRL+C，結束了。什麼……就這樣？是的，就是這麼簡單這麼容易，一點也不難吧？這樣就可以把選取的分節貼到您想要貼的小說網站或BLOG去了。

【應用例子二：我可以不分檔案把整集小說存在同一個檔案裡嗎？】

當然可以，這也是分節標籤的另一種應用方式。當你沒有分節的需求，但是想要把每一章都存在一起的時候，你只要把分節標籤定位為「章」就可以了，左側列表就從第一章編到第ｎ章，可以把全篇小說都存在同一個檔案裡頭。對於短篇小說來講，這種使用方式便於移動和管理。


&lt;ahne[tag:split]第三章：符號表與快捷鍵[end:split]&gt;
【符號表與快捷鍵】

這裡指的符號表就是你現在在畫面下方所看到的那兩排標點符號與圖樣，其中平面按鈕型式的只要點下去就會在游標位置（只對小說編輯區有效）自動打上這個符號；如果是左邊三個上拉式的則需要先選取，之後和按鈕一樣會在游標所在位置自動打上這個符號。

值得「注意」的是：有幾樣引號括號是一次點下去就會把起頭和結尾一起打上去的，如果你沒有選取文字，這種鈕按下去跟其它符號一樣，只會自動打上那個符號；若是有選取一段文字，則這種頭尾組合的符號鈕會自動幫你把頭跟尾加在你選取的字的前面和後面。只有這種頭尾組合的符號有這種功能，若是單一字符的符號，會直接把選取區的字刪除掉換成那個符號。

【快捷鍵】部分符號表的符號有編輯時的快捷鍵可以直接輸入：

「，」：快捷鍵為「CTRL　+　,　」
「。」：快捷鍵為「CTRL　+　.　」
「；」：快捷鍵為「CTRL　+　;　」
「“”」：快捷鍵為「CTRL　+　'　」
「「」」：快捷鍵為「CTRL　+　Q　」
「『』」：快捷鍵為「CTRL　+　W　」
「、」：快捷鍵為「CTRL　+　3　」
「…」：快捷鍵為「CTRL　+　4　」

&lt;ahne[tag:split]第四章：字數計[end:split]&gt;

字數計的主要用處是計算你目前的文章打了多少個字，在右方是計算您的文章有幾節分節數，在左方有一個「顯示／隱藏」按鈕，打開來就可以看到現在的字數，看完了記得關起來，別怪我沒提醒你。

為什麼要關起來？其實一直打開著也可以，不過這樣每打一個字它就會計算一次，而計算的時候就會對傳統輸入法造成阻斷，像是舊注音輸入完字後的相關字詞視窗就不會出現了，不過新注音倒是沒什麼受影響。

打開的話可以看到三種計數器：
【總體字數】：目前這篇文章裡頭全部的字數是多少。
【內文字數】：全部的字數扣掉分節標籤的字數（投稿時分節標籤總不能算進去吧？）
【選取字數】：只要您有選取，它就會顯示你選取的這一段字總共有幾個字。單純在選取的時候你可以把它打開沒有任何問題，它也會立即反應你選了幾個字。

字數的計算是單純以字為單位，中文當然沒問題，英文呢？是字母還是單字？答案是一個英文字母算一個字，並非一個單字才算一個字。

&lt;ahne[tag:split]第五章：輔助板[end:split]&gt;

現代人很多螢幕都已經採用寬螢幕，什麼1440x900、1680x1050、1920x1080……好多好多，打文的時候左邊當然是滿滿的字，可是右邊呢？要是把編輯區拉寬到全螢幕寬想來你打文也不好過吧，眼珠就得從左邊一直掃到右邊去，難受啊！可是要是把編輯區都集中在中間偏左，那右邊空著一大塊又要做什麼呢？

別說我不體貼你，給你設計了一個輔助板。輔助板是很單純的文字框，你可以貼上或打上一些你想要參考的字，比方說你把大鋼給打開來複製今天要打的那一段到輔助板上面去，這時候你在中間打文打一打忘了接下來的劇情，你可以往右瞄一瞄大綱，當然前題是你有寫大綱啦……呵！

使用上很簡單，你把輔助板控制器的「顯示／隱藏」按一下，輔助板就會打開或關起來囉！

【調配寬】
想當然，也許你會想要調整文字編輯區和輔助板彼此所佔的比例吧？沒問題，調配寬就是幫助您做這樣的設定的。按一下左右鈕，文字編輯區和輔助板的間隔位置就會左移右移，幫助你調整出最適合你的寬度。如果不習慣的話，可以按一下預設鈕，它會還原程式預設比例的。

對了，即使輔助板沒有打開，你也可以按下調配寬的左右鈕調整文字編輯區的範圍喔！

&lt;ahne[tag:split]第六章：選項說明[end:split]&gt;
【選項說明】

選項內有三個頁籤

【編輯區設定】：就是你打文的這一塊文字編輯區的相關設定了，除了可以調整字型外，還可以調整文字的顏色、背景顏色、按下識別後的顏色。請注意，這裡的設定將成為「字型統整」按鈕的依據，更改後按下「字型統整」鈕將會重設文字為您設定過後的風格。

【輔助板設定】：右邊那一塊輔助板的顯示設定，除了沒有識別功能之外，其他如上。

【自動化設定】：一些有關程式自動動作的設定。

	《啟動自動備存》：這個功能將會按照您在設定右方輸入的秒數，每達到秒數之後，就會在適當時機將您目前編輯的文章做一次備存。能夠備存的文章必需是已經存在硬碟的檔案，所以開新檔案後如果沒有另存新檔的話，那個檔案是不會擁有自動備存機制的，要享受這個功能請記得開新檔案後第一件事就是找個目錄存檔。檔案會以該檔案的檔名加上「.nbk」為檔名，當系統當機沒有存檔時，下次開啟這個檔案有偵測到備存檔的存在的話，會提示你是否要從備存檔還原。

	《啟動保護視力》：打文的你辛苦了，但是有沒有乖乖照著醫生的提醒起來動一動身體喝口水啊？想來很多人都是文章一打就廢寢忘食漫無天地了，可能一打就忘了這個世界的存在，沒關係，貼心的我為您準備了提醒機制，只要您勾選這個功能並在右方輸入您多久想要起來動一動，把分鐘數輸入進去，程式就會在計時器到達設定時間後閃躲提醒您。

	《顯示打文計時器》：啟動的話會在字數計最下方顯示你啟動本軟體已經打文打了多久的時間，可以幫助您調整一下自己打字速度。

【人物設定項目】：調整「插入人物設定分節」時自動產生的人物設定項目，同時有三個備用儲存區可以儲放和取用設定。

&lt;ahne[tag:split]第七章：人物設定小老師[end:split]&gt;
【人物設定】

人物設定是一部小說的魂，要讓筆下（鍵盤下？）人物活起來，要掌握一個角色的個性，要描寫的栩栩如生又不反覆，人物設定是很重要的。因此，本軟體亦提供一個制式化卻又自由化的人物設定功能，搭配內建的分節控器，可以讓你管理人物設定。

在此之前，必需傳輸你一個「重要概念」，那就是在本軟體中如果要編輯人物設定，請「務必開新檔案並將該檔案專用於人物設定」，不要將人物設定和小說文章混合在一起，因為人物設定也是用分節控制器控制的，同時有自己專屬格式。不過副檔名用 .txt 就可以，因為它依然是純文字檔。

&lt;ahne[tag:split]　　〔插入人物設定分節〕[end:split]&gt;
【插入人物設定分節】

按下這個鈕之後，首先會像新增分節一樣彈出一個輸入框請您輸入，這裡一樣是會顯示在分節列表上的項目名稱，通常我們都是用角色名稱來輸入的。你也可以自己訂定一些格式輸入，比方說輸入「極－周宇成」、「闇－陳火炎」，用來在列表辨識該人物是那一個組織單位的角色。

按下確定後，文章內馬上會出現預設格式的輸入文字，會有一大段用項目名稱以及：【】組成的配置。是的，項目名稱即是要你輸入的項目，而【】內就是讓你輸入設定用的。

舉個例子，「血型：【】」就是讓你在【】內輸入該角色的血型。

請注意，人物設定的格式就是「項目名稱：【】」，任何包在【】內的文字都是設定的一部分，而在冒號前面的就是項目名稱，依照這個格式，你也可以自己建立在預設項目以外的自訂項目，是不是很自由啊？

比方說你打了「八旗：【正黃旗】」這樣的內容，不在預設格式之內，是用來寫清代小說角色隸屬滿洲八旗中的那一旗，只要格式正確就可以解讀。沒有用到的項目可以刪除，也可以保持空白，那都不會影響到人物設定的問題。

好了，你一定會注意到，人物設定的開頭是＜ahne分節標的，那結尾呢？沒錯，在最下一行會有一段文字「*設定結束：【END此行請保留在每個人物設定檔最後一行】」，這就是一個角色設定的結尾了，要插入一個新的角色，只要持續按「工具→人物設定→插入人物設定分節」，但是請務必注意，新插入的位置要在設定結束的下一行之後，所以請不要在分節標籤到設定結束這之間插入新的人物設定，否則會造成意想不到的結果。

看到這裡你一定又注意到了，為什麼有些項目前面有「*」號？而且預設名為隱藏標籤的前面都有？聰明的你一定注意到了吧，看下去就對了，這是下一節轉HTML的重要記號。

&lt;ahne[tag:split]　　〔轉成HTML〕[end:split]&gt;
【將人物設定公開部分或全部轉成HTML】

人物設定的功能除了打給自己看外，有時候也是需要分享給別人的，可是很難把它表示出來吧？沒有問題，請讀者也下載本軟體，把人物設定丟給他們看就好了……

「不行啊！人物設定中包含著往後章節的伏筆，不能直接丟出去啊！」

「那簡單，你把相關的部分刪去不就得了？」

「那可不，一個字一個字找，都不知要地老天荒，也許稍不細心沒察覺又洩了出去！」

是的，我們已經想過了，而且那種設定格式丟出去也太難解讀了吧？沒關係，轉成HTML再丟出去就行了，是HTML的話讀者都能用瀏覽器直接看到了吧！

只要你的人物設定格式是標準的，就可以轉換。人物設定裡有兩種轉換模式，一種是保留隱藏的人物設定不轉換，一種是全部轉換。當你只想給讀者看你想要給的部分時就用前者，「將人物設定公開部分轉成HTML」。那……怎麼控制啥要公開？啥要隱藏？很簡單，項目名稱前面有打「*」號的就是隱藏設定，它不會轉出到HTML內容裡。

按下兩種「轉成HTML」之後，程式會自動開新檔案，把HTML原始碼自動貼在新檔案之中，你只要存成「.htm」檔就可以用瀏覽器打開來看了，人物設定將以表格的方式呈現。只要有項目名稱就會繪製一列，沒有內容就保持空白，所以你用不到的項目可以事先刪掉。

當然，另一種情況是你要直接把人物設定貼在小說網站或BLOG上面，那也沒關係，轉出後的原始碼你想貼那一段就複製那一段，分節標籤也會保留，你可以只貼個別人物的設定內容，分節的使用和打文章時沒有兩樣。HTML原始碼中有一段＜!-- Start Expert --＞，前面是HTML原始碼檔頭，要複製從這下面開始複製就好了。

&lt;ahne[tag:split]　　〔其他功能〕[end:split]&gt;
【其他功能】
	《去除人物設定隱藏部分》：將人物設定所有隱藏的項目去除掉。



&lt;ahne[tag:split]第八章：大綱編輯小老師[end:split]&gt;

大綱為寫文之本，要應用本軟體編輯大綱其實並不困難。以「極光駭客」這部小說為例，主線分為「航向駭客篇」、「Soul篇」、「富貴中學篇」、「滿月之戰篇」，而有一些細部支線例如「明昂與天守之人相遇」、「破碎三人組的過去」之類的，此時就能應用分節控制器達成整理大綱的目標。

我們可以在分節控制器上新增「主－航向駭客」、「主－滿月之戰」用來標示每一節內容敘述的是主線的那一段；然後可以用「支－破碎三人組的過去」標明為支線劇情，在該節內容輸入支線劇情。甚至你可以自闢一區「靈感存放區」把有關靈感輸入在那一分節內，甚至分成「靈感一」「靈感二」分開標記都無所謂。應用分節控制器，大綱內容將可以編輯完整，在跳躍支線的部分又可以透過分節列表快速跳躍檢視支線劇情。

若要編輯年表，亦可利用分節控制器，在分節上打入類似「2001年」「2002年」，然後在每一年下面再新增「　　一月」「　　二月」將月分節也列出來，之後在月分節下記載當月發生事件與結果即可完成年表式的大綱編輯。

總而言之，運用分節標籤將可方便的在一份檔案之中將大綱一塊一塊的區分開來，方便管理與檢視，透過列表如書籤般快速跳躍，可以輕鬆的掌握大綱中的每一段。

&lt;ahne[tag:split]第九章：作者的話[end:split]&gt;

嗯……這支程式主要是方便編輯小說，由於使用Visual Basic 2005 Express 改寫完成，其編譯器不再是需要花錢購買的而是 Free 下載的版本，所以終於可以開放原始碼供人下載了。

原始碼的部分，有任何更好的想法或覺得對自己比較方便的設定就不要懷疑了，動手下去修改並分享更棒的版本給網友使用吧！像是你覺得快捷鍵的安排不好，識別的功能應該更上一層，有其他符號也想用高亮顯示，那就修改程式碼達成你想要的目的。因為基本的文章編輯架構已經足以打出文章了（至少你看的這篇說明就是用程式打出來的），所以要修改的話應該很快可以上手。

不過也希望有些格式相容性的問題不要做修改，像是分節標籤，如果你修改了起頭與結尾的標籤字樣，或是人物設定的文本格式，那將會造成不同版本相容性的問題。

&lt;ahne[tag:split]第十章：字碼轉換[end:split]&gt;
字碼轉換（Beta 2 新增功能）

【注意：字碼轉換系列功能如果有選取一段字，則只會轉換選取那部分；如果沒有選取，則會將全文進行轉換。】

	《半形轉全形》：將半形的數字、符號、英文適當的轉成全形大小。
	《全形轉半形》：將全形的符號、數字、英文在有對應的情況下轉成半形。
	《簡體轉繁體》：將簡體字轉換為繁體字。
	《繁體轉簡體》：將繁體字轉換為簡體字。


&lt;ahne[tag:split]第十一章：分頁書籤快載[end:split]&gt;
分頁、書籤、快載（Beta3 新增功能）

【分頁】：開啟一份文件時，頁籤會被登錄到分頁功能表，點選分頁內的檔名就會跳到該編輯檔案去。

【書籤】：可將常用的檔案加入書籤以便快速存取。切換到要加入書籤的分頁，然後按一下書籤功能表的「將目前檔案加入書籤」，就可以把該檔案加入，將來直接點選書籤功能表即可開啟該檔案。如果檔案位置移動了，該書籤就會失效，請注意這點。失效或不用的書籤可以進行移除，移除方法為「在該書籤項目功能表選單位置上按滑鼠右鍵就會詢問是否要刪除」，確認後即刪除。

【快載】：如果檔案不是開新檔案而是已經存在硬碟裡的，那麼在載入檔案的時候就會一併將同目錄下的純文字檔都載進「快載」功能表中，可以直接利用這裡打開檔案。比方說，你在一個目錄下存有「第一章.txt」、「第二章.txt」、「第三章.txt」、「第四章.txt」、「第五章.txt」，當你打開了「第一章.txt」的同時，程式會自動為您將五個檔案的快速開啟都載進「快載」功能表。
</value>
  </data>
</root>